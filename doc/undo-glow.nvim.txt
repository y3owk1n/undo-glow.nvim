*undo-glow.nvim.txt*

Add animated glow/highlight effects to your neovim operation (undo, redo, yank, paste and more) with simple APIs.
Alternatives to highlight-undo.nvim and tiny-glimmer.nvim.

==============================================================================
Table of Contents                                           *undo-glow.nvim.toc*

API ······················································· |undo-glow.nvim.api|
Configurations ········································· |undo-glow.nvim.config|
Types ··················································· |undo-glow.nvim.types|

==============================================================================
API                                                         *undo-glow.nvim.api*

M.setup                                               *undo-glow.nvim.api.setup*
    Entry point to setup the plugin

    Type: ~
        (fun(user_config?:UndoGlow.Config))


M.easing                                             *undo-glow.nvim.api.easing*
    Easing functions that are builtin.

    Type: ~
        (table<UndoGlow.EasingString,fun(opts:UndoGlow.EasingOpts):integer>)


M.animate_start                               *undo-glow.nvim.api.animate_start*
    Start animation function.
    Repeatedly calls the provided animation function with a progress value between 0 and 1 until the animation completes.

    Type: ~
        (fun(opts:UndoGlow.Animation,animate_fn:fun(progress:number,end_animation:function):UndoGlow.HlColor|nil):nil)


M.undo({opts?})                                        *undo-glow.nvim.api.undo*
    Undo command that highlights.

    Parameters: ~
        {opts?}  (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (nil)


M.redo({opts?})                                        *undo-glow.nvim.api.redo*
    Redo command that highlights.

    Parameters: ~
        {opts?}  (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (nil)


M.yank({opts?})                                        *undo-glow.nvim.api.yank*
    Yank command that highlights.
    For autocmd usage only.

    Parameters: ~
        {opts?}  (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (nil)


M.paste_below({opts?})                          *undo-glow.nvim.api.paste_below*
    Paste below command with highlights.

    Parameters: ~
        {opts?}  (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (nil)


M.paste_above({opts?})                          *undo-glow.nvim.api.paste_above*
    Paste above command with highlights.

    Parameters: ~
        {opts?}  (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (nil)


M.search_cmd({opts?})                            *undo-glow.nvim.api.search_cmd*
    Highlight current line after a search is performed.
    For autocmd usage only.

    Parameters: ~
        {opts?}  (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (nil)


M.search_next({opts?})                          *undo-glow.nvim.api.search_next*
    Search next command with highlights.

    Parameters: ~
        {opts?}  (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (nil)


M.search_prev({opts?})                          *undo-glow.nvim.api.search_prev*
    Search prev command with highlights.

    Parameters: ~
        {opts?}  (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (nil)


M.search_star({opts?})                          *undo-glow.nvim.api.search_star*
    Search star (*) command with highlights.

    Parameters: ~
        {opts?}  (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (nil)


M.search_hash({opts?})                          *undo-glow.nvim.api.search_hash*
    Search star (#) command with highlights.

    Parameters: ~
        {opts?}  (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (nil)


M.comment({opts?})                                  *undo-glow.nvim.api.comment*
    Comment with `gc` in `n` and `x` mode with highlights.
    Requires `expr` = true in ``vim.keymap.set`

    Parameters: ~
        {opts?}  (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (string|nil)  String for expression and nil for non-expression


M.comment_textobject({opts?})            *undo-glow.nvim.api.comment_textobject*
    Comment with `gc` in `o` mode. E.g. gcip, gcap, etc with highlights.

    Parameters: ~
        {opts?}  (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (nil)


M.comment_line({opts?})                        *undo-glow.nvim.api.comment_line*
    Comment lines with `gcc` with highlights.
    Requires `expr` = true in ``vim.keymap.set`

    Parameters: ~
        {opts?}  (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (string)  String for expression


                                               *undo-glow.nvim.api.cursor_moved*
M.cursor_moved({opts?}, {cursor_moved_opts?})
    Cursor move command that highlights.
    For autocmd usage only.

    Parameters: ~
        {opts?}               (UndoGlow.CommandOpts)      Optional command option
        {cursor_moved_opts?}  (UndoGlow.CursorMovedOpts)  Optional cursor move options

    Returns: ~
        (nil)


M.yanky_put({yanky_action}, {opts?})              *undo-glow.nvim.api.yanky_put*
    Yanky.nvim put command that highlights.

    Parameters: ~
        {yanky_action}  (string)                The yanky action to perform.
        {opts?}         (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (nil)

    Usage: ~
>lua
        require("undo-glow").yanky_put("YankyPutAfter")
<


M.substitute_action({action}, {opts?})    *undo-glow.nvim.api.substitute_action*
    Substitute.nvim action command that highlights.

    Parameters: ~
        {action}  (fun())                 The action to perform.
        {opts?}   (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (nil)

    Usage: ~
>lua
        require("undo-glow").substitute_action(require("substitute").line)
<


M.flash_jump({flash_opts?}, {opts?})             *undo-glow.nvim.api.flash_jump*
    Flash.nvim jump command that highlights.

    Parameters: ~
        {flash_opts?}  (table)                 The flash jump options.
        {opts?}        (UndoGlow.CommandOpts)  Optional command option

    Returns: ~
        (nil)

    Usage: ~
>lua
        require("undo-glow").flash_jump(flash_opts, opts)
<


M.highlight_changes({opts?})              *undo-glow.nvim.api.highlight_changes*
    Core API to highlight changes in the current buffer.

    Parameters: ~
        {opts?}  (UndoGlow.HighlightChanges|UndoGlow.CommandOpts)

    Returns: ~
        (nil)


M.highlight_region({opts})                 *undo-glow.nvim.api.highlight_region*
    Core API to highlight a specified region in the current buffer.

    Parameters: ~
        {opts}  (UndoGlow.HighlightRegion)

    Returns: ~
        (nil)


==============================================================================
Configurations                                           *undo-glow.nvim.config*


Example Configuration:

>
{
	animation = {
		enabled = false,
		duration = 100,
		animation_type = "fade",
		fps = 120,
		easing = "in_out_cubic",
		window_scoped = false,
	},
	fallback_for_transparency = {
		bg = "#000000",
		fg = "#FFFFFF",
	},
	highlights = {
		undo = {
			hl = "UgUndo",
			hl_color = require("undo-glow.color").default_undo,
		},
		redo = {
			hl = "UgRedo",
			hl_color = require("undo-glow.color").default_redo,
		},
		yank = {
			hl = "UgYank",
			hl_color = require("undo-glow.color").default_yank,
		},
		paste = {
			hl = "UgPaste",
			hl_color = require("undo-glow.color").default_paste,
		},
		search = {
			hl = "UgSearch",
			hl_color = require("undo-glow.color").default_search,
		},
		comment = {
			hl = "UgComment",
			hl_color = require("undo-glow.color").default_comment,
		},
		cursor = {
			hl = "UgCursor",
			hl_color = require("undo-glow.color").default_cursor,
		},
	},
	priority = 4096, -- so that it will work with render-markdown.nvim
}
<


M.config                                          *undo-glow.nvim.config.config*
    User-provided config, merged with defaults

    Type: ~
        (UndoGlow.Config)


==============================================================================
Types                                                     *undo-glow.nvim.types*

                             *undo-glow.nvim.types.UndoGlow.AnimationTypeString*
UndoGlow.AnimationTypeString
    Animation type aliases.

    Variants: ~
        ("fade")
        ("fade_reverse")
        ("blink")
        ("pulse")
        ("jitter")
        ("spring")
        ("desaturate")
        ("strobe")
        ("zoom")
        ("rainbow")
        ("slide")


                                 *undo-glow.nvim.types.UndoGlow.AnimationTypeFn*
UndoGlow.AnimationTypeFn

    Type: ~
        fun(opts:UndoGlow.Animation)


                                    *undo-glow.nvim.types.UndoGlow.EasingString*
UndoGlow.EasingString
    Easing function aliases.

    Variants: ~
        ("linear")
        ("in_quad")
        ("out_quad")
        ("in_out_quad")
        ("out_in_quad")
        ("in_cubic")
        ("out_cubic")
        ("in_out_cubic")
        ("out_in_cubic")
        ("in_quart")
        ("out_quart")
        ("in_out_quart")
        ("out_in_quart")
        ("in_quint")
        ("out_quint")
        ("in_out_quint")
        ("out_in_quint")
        ("in_sine")
        ("out_sine")
        ("in_out_sine")
        ("out_in_sine")
        ("in_expo")
        ("out_expo")
        ("in_out_expo")
        ("out_in_expo")
        ("in_circ")
        ("out_circ")
        ("in_out_circ")
        ("out_in_circ")
        ("in_elastic")
        ("out_elastic")
        ("in_out_elastic")
        ("out_in_elastic")
        ("in_back")
        ("out_back")
        ("in_out_back")
        ("out_in_back")
        ("in_bounce")
        ("out_bounce")
        ("in_out_bounce")
        ("out_in_bounce")


UndoGlow.EasingFn                       *undo-glow.nvim.types.UndoGlow.EasingFn*

    Type: ~
        fun(opts:UndoGlow.EasingOpts):integer


UndoGlow.Config                           *undo-glow.nvim.types.UndoGlow.Config*
    Configuration options for undo-glow.

    Fields: ~
        {animation?}   (UndoGlow.Config.Animation)  Configuration for animations.
        {highlights?}  (table)


                  *undo-glow.nvim.types.UndoGlow.Config.FallbackForTransparency*
UndoGlow.Config.FallbackForTransparency
    Fallback color for when the highlight is transparent.

    Fields: ~
        {bg?}  (string)  Background color as a hex string.
        {fg?}  (string)  Optional foreground color as a hex string.


UndoGlow.EasingOpts                   *undo-glow.nvim.types.UndoGlow.EasingOpts*
    Options passed to easing functions.

    Fields: ~
        {time}        (number)  Elapsed time (e.g. a progress value between 0 and 1).
        {begin?}      (number)  Optional start value.
        {change?}     (number)  Optional change value (ending minus beginning).
        {duration?}   (number)  Optional total duration.
        {amplitude?}  (number)  Optional amplitude (for elastic easing).
        {period?}     (number)  Optional period (for elastic easing).
        {overshoot?}  (number)  Optional overshoot (for back easing).


                                *undo-glow.nvim.types.UndoGlow.Config.Animation*
UndoGlow.Config.Animation
    Animation configuration.

    Fields: ~
        {enabled?}         (boolean)                                                Whether animation is enabled.
        {duration?}        (number)                                                 Duration of the highlight animation in milliseconds.
        {animation_type?}  (UndoGlow.AnimationTypeString|UndoGlow.AnimationTypeFn)  Animation type (a string key or a custom function).
        {easing?}          (UndoGlow.EasingString|UndoGlow.EasingFn)                Easing function (a string key or a custom function).
        {fps?}             (number)                                                 Frames per second for the animation.
        {window_scoped?}   (boolean)                                                If enabled, the highlight effect is constrained to the current active window, even if the buffer is shared across splits.


UndoGlow.HlColor                         *undo-glow.nvim.types.UndoGlow.HlColor*
    Highlight color information.

    Fields: ~
        {bg}   (string)  Background color as a hex string.
        {fg?}  (string)  Optional foreground color as a hex string.


UndoGlow.State                             *undo-glow.nvim.types.UndoGlow.State*
    State for the undo-glow highlight.

    Fields: ~
        {current_hlgroup}  (string)                     The current highlight group in use.
        {should_detach}    (boolean)                    Whether the highlight should detach.
        {animation?}       (UndoGlow.Config.Animation)  Animation configuration.
        {force_edge?}      (boolean)                    Whether to force edge highlighting.


UndoGlow.RGBColor                       *undo-glow.nvim.types.UndoGlow.RGBColor*
    RGB color representation.

    Fields: ~
        {r}  (integer)  Red (0-255)
        {g}  (integer)  Green (0-255)
        {b}  (integer)  Blue (0-255)


UndoGlow.HSLColor                       *undo-glow.nvim.types.UndoGlow.HSLColor*
    HSL color representation.

    Fields: ~
        {h}  (integer)  Hue component in degrees (0-360)
        {s}  (integer)  Saturation component as a percentage (0-100)
        {l}  (integer)  Lightness component as a percentage (0-100)


                                     *undo-glow.nvim.types.UndoGlow.CommandOpts*
UndoGlow.CommandOpts
    Command options for triggering highlights.

    Fields: ~
        {hlgroup?}     (string)                     Optional highlight group to use.
        {animation?}   (UndoGlow.Config.Animation)  Optional animation configuration.
        {force_edge?}  (boolean)                    Optional flag to force edge highlighting.


                                *undo-glow.nvim.types.UndoGlow.HighlightChanges*
UndoGlow.HighlightChanges : UndoGlow.CommandOpts
    Options for highlight changes API.


                                 *undo-glow.nvim.types.UndoGlow.HighlightRegion*
UndoGlow.HighlightRegion : UndoGlow.CommandOpts, UndoGlow.RowCol
    Options for highlight region API.


UndoGlow.Animation                     *undo-glow.nvim.types.UndoGlow.Animation*
    Parameters for an animation.

    Fields: ~
        {bufnr}         (integer)            Buffer number.
        {ns}            (integer)            Namespace id.
        {hlgroup}       (string)             Highlight group name.
        {extmark_ids?}  (integer[])          Extmark identifiers.
        {start_bg}      (UndoGlow.RGBColor)  Starting background color.
        {end_bg}        (UndoGlow.RGBColor)  Ending background color.
        {start_fg?}     (UndoGlow.RGBColor)  Optional starting foreground color.
        {end_fg?}       (UndoGlow.RGBColor)  Optional ending foreground color.
        {duration}      (number)             Animation duration in milliseconds.
        {config}        (UndoGlow.Config)    Configuration for undo-glow.
        {state}         (UndoGlow.State)     Current state of the highlight.
        {coordinates}   (UndoGlow.RowCol)    Current sanitized coordinates


                                 *undo-glow.nvim.types.UndoGlow.HandleHighlight*
UndoGlow.HandleHighlight : UndoGlow.RowCol
    Handle for highlighting operations, including region coordinates.

    Fields: ~
        {bufnr}  (integer)         Buffer number.
        {ns?}    (integer)         Namespace id.
        {state}  (UndoGlow.State)  Current state of the highlight.


UndoGlow.RowCol                           *undo-glow.nvim.types.UndoGlow.RowCol*
    Represents a region (row/column coordinates) in the buffer.

    Fields: ~
        {s_row}  (integer)  Start row.
        {s_col}  (integer)  Start column.
        {e_row}  (integer)  End row.
        {e_col}  (integer)  End column.


                                     *undo-glow.nvim.types.UndoGlow.ExtmarkOpts*
UndoGlow.ExtmarkOpts : UndoGlow.RowCol
    Opts to create an extmark

    Fields: ~
        {bufnr}           (integer)  Buffer number.
        {hlgroup}         (string)   Highlight group name.
        {priority}        (integer)  Extmark priority to render the highlight (Default 4096).
        {force_edge?}     (boolean)  Whether to force edge highlighting.
        {window_scoped?}  (boolean)  If enabled, the highlight effect is constrained to the current active window, even if the buffer is shared across splits.


                                 *undo-glow.nvim.types.UndoGlow.CursorMovedOpts*
UndoGlow.CursorMovedOpts
    Opts for cursor moved command

    Fields: ~
        {ignored_ft?}  (table)


vim:tw=78:ts=8:noet:ft=help:norl:
